1  proc fib(int n) {
          [0002, 0002] (0042,              procDef) {proc}
          [0002, 0007] (0004,                   id) {fib}
          [0002, 0010] (0005,             paramBeg) {(}
          [0002, 0011] (0008,              typeInt) {int}
          [0002, 0015] (0004,                   id) {n}
          [0002, 0016] (0006,             paramEnd) {)}
   2  	int n1 = 0, n2 = 1, n3;
          [0003, 0001] (0014,           beginScope) {{}
          [0003, 0003] (0008,              typeInt) {int}
          [0003, 0007] (0004,                   id) {n1}
          [0003, 0010] (0040,             opAttrib) {=}
          [0003, 0012] (0016,             constInt) {0}
          [0003, 0013] (0007,             commaSep) {,}
          [0003, 0015] (0004,                   id) {n2}
          [0003, 0018] (0040,             opAttrib) {=}
          [0003, 0020] (0016,             constInt) {1}
          [0003, 0021] (0007,             commaSep) {,}
          [0003, 0023] (0004,                   id) {n3}
          [0003, 0025] (0043,            semicolon) {;}
   3  	if (n == 0) {
          [0004, 0003] (0046,               condIf) {if}
          [0004, 0006] (0005,             paramBeg) {(}
          [0004, 0007] (0004,                   id) {n}
          [0004, 0009] (0034,             opEquals) {==}
          [0004, 0012] (0016,             constInt) {0}
          [0004, 0013] (0006,             paramEnd) {)}
   4  		print("%d\n", n);
          [0005, 0001] (0014,           beginScope) {{}
          [0005, 0004] (0050,                print) {print}
          [0005, 0009] (0005,             paramBeg) {(}
          [0005, 0010] (0021,             constStr) {"%d\n"}
          [0005, 0016] (0007,             commaSep) {,}
          [0005, 0018] (0004,                   id) {n}
          [0005, 0019] (0006,             paramEnd) {)}
          [0005, 0020] (0043,            semicolon) {;}
   5  	} ceif (n == 1) {
          [0006, 0003] (0015,             endScope) {}}
          [0006, 0005] (0047,           condElseIf) {ceif}
          [0006, 0010] (0005,             paramBeg) {(}
          [0006, 0011] (0004,                   id) {n}
          [0006, 0013] (0034,             opEquals) {==}
          [0006, 0016] (0016,             constInt) {1}
          [0006, 0017] (0006,             paramEnd) {)}
   6  		print("0, %d\n", n);
          [0007, 0001] (0014,           beginScope) {{}
          [0007, 0004] (0050,                print) {print}
          [0007, 0009] (0005,             paramBeg) {(}
          [0007, 0010] (0021,             constStr) {"0, %d\n"}
          [0007, 0019] (0007,             commaSep) {,}
          [0007, 0021] (0004,                   id) {n}
          [0007, 0022] (0006,             paramEnd) {)}
          [0007, 0023] (0043,            semicolon) {;}
   7  	} else {
          [0008, 0003] (0015,             endScope) {}}
          [0008, 0005] (0048,             condElse) {else}
   8  		string separator = "";
          [0009, 0001] (0014,           beginScope) {{}
          [0009, 0004] (0013,              typeStr) {string}
          [0009, 0011] (0004,                   id) {separator}
          [0009, 0021] (0040,             opAttrib) {=}
          [0009, 0023] (0021,             constStr) {""}
          [0009, 0025] (0043,            semicolon) {;}
   9  		print("0, 1, ");
          [0010, 0004] (0050,                print) {print}
          [0010, 0009] (0005,             paramBeg) {(}
          [0010, 0010] (0021,             constStr) {"0, 1, "}
          [0010, 0018] (0006,             paramEnd) {)}
          [0010, 0019] (0043,            semicolon) {;}
  10  		while (true) {
          [0011, 0004] (0045,            whileLoop) {while}
          [0011, 0010] (0005,             paramBeg) {(}
          [0011, 0011] (0019,            constBool) {true}
          [0011, 0015] (0006,             paramEnd) {)}
  11  			n3 = n1 + n2;
          [0012, 0001] (0014,           beginScope) {{}
          [0012, 0005] (0004,                   id) {n3}
          [0012, 0008] (0040,             opAttrib) {=}
          [0012, 0010] (0004,                   id) {n1}
          [0012, 0013] (0022,                opAdd) {+}
          [0012, 0015] (0004,                   id) {n2}
          [0012, 0017] (0043,            semicolon) {;}
  12  			print("%s%d", separator, n3);
          [0013, 0005] (0050,                print) {print}
          [0013, 0010] (0005,             paramBeg) {(}
          [0013, 0011] (0021,             constStr) {"%s%d"}
          [0013, 0017] (0007,             commaSep) {,}
          [0013, 0019] (0004,                   id) {separator}
          [0013, 0028] (0007,             commaSep) {,}
          [0013, 0030] (0004,                   id) {n3}
          [0013, 0032] (0006,             paramEnd) {)}
          [0013, 0033] (0043,            semicolon) {;}
  13  			if (n3 >= n) {
          [0014, 0005] (0046,               condIf) {if}
          [0014, 0008] (0005,             paramBeg) {(}
          [0014, 0009] (0004,                   id) {n3}
          [0014, 0012] (0032,               opGreq) {>=}
          [0014, 0015] (0004,                   id) {n}
          [0014, 0016] (0006,             paramEnd) {)}
  14  				print("\n");
          [0015, 0001] (0014,           beginScope) {{}
          [0015, 0006] (0050,                print) {print}
          [0015, 0011] (0005,             paramBeg) {(}
          [0015, 0012] (0021,             constStr) {"\n"}
          [0015, 0016] (0006,             paramEnd) {)}
          [0015, 0017] (0043,            semicolon) {;}
  15  				return;
          [0016, 0006] (0002,               funRet) {return}
          [0016, 0012] (0043,            semicolon) {;}
  16  			}
  17  			separator = ", "			
          [0018, 0001] (0015,             endScope) {}}
          [0018, 0005] (0004,                   id) {separator}
          [0018, 0015] (0040,             opAttrib) {=}
          [0018, 0017] (0021,             constStr) {", "}
  18  			n1 = n2;
          [0019, 0005] (0004,                   id) {n1}
          [0019, 0008] (0040,             opAttrib) {=}
          [0019, 0010] (0004,                   id) {n2}
          [0019, 0012] (0043,            semicolon) {;}
  19  			n2 = n3;
          [0020, 0005] (0004,                   id) {n2}
          [0020, 0008] (0040,             opAttrib) {=}
          [0020, 0010] (0004,                   id) {n3}
          [0020, 0012] (0043,            semicolon) {;}
  20  		}
  21  	}
          [0022, 0001] (0015,             endScope) {}}
  22  }
          [0023, 0001] (0015,             endScope) {}}
  23  
          [0024, 0001] (0015,             endScope) {}}
  24  fun int main() {
          [0025, 0002] (0001,               funDef) {fun}
          [0025, 0006] (0008,              typeInt) {int}
          [0025, 0010] (0003,                 main) {main}
          [0025, 0014] (0005,             paramBeg) {(}
          [0025, 0015] (0006,             paramEnd) {)}
  25  	int n;
          [0026, 0001] (0014,           beginScope) {{}
          [0026, 0003] (0008,              typeInt) {int}
          [0026, 0007] (0004,                   id) {n}
          [0026, 0008] (0043,            semicolon) {;}
  26  	read(n);
          [0027, 0003] (0049,                 scan) {read}
          [0027, 0007] (0005,             paramBeg) {(}
          [0027, 0008] (0004,                   id) {n}
          [0027, 0009] (0006,             paramEnd) {)}
          [0027, 0010] (0043,            semicolon) {;}
  27  	fib(n);
          [0028, 0003] (0004,                   id) {fib}
          [0028, 0006] (0005,             paramBeg) {(}
          [0028, 0007] (0004,                   id) {n}
          [0028, 0008] (0006,             paramEnd) {)}
          [0028, 0009] (0043,            semicolon) {;}
  28  	return 0;
          [0029, 0003] (0002,               funRet) {return}
          [0029, 0010] (0016,             constInt) {0}
          [0029, 0011] (0043,            semicolon) {;}
  29  }
          [0030, 0002] (0015,             endScope) {}}